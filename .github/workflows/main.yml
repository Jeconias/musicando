# This is a basic workflow to help you get started with Actions

name: Android Feature Branch CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  BuildApp:
    runs-on: ubuntu-18.04

    outputs:
      shouldCreateRelease: ${{ steps.changelog.outputs.shouldCreateRelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      version: ${{ steps.changelog.outputs.version }}
      release: ${{ steps.changelog.outputs.release }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Read the README.md - Changelog
        id: changelog
        uses: Jeconias/changelog@v1.4

      - uses: actions/cache@v2
        id: cacheApp
        with:
          path: |
            node_modules
            android/app/build/outputs/apk/release
          key: ${{ steps.changelog.outputs.version }}-${{ hashFiles('yarn.lock') }}

      - name: Create .env file
        uses: Jeconias/create-envfile@v1.0
        with:
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
          API_URL: ${{ secrets.API_URL }}
          MYAPP_RELEASE_STORE_FILE: ${{ secrets.MYAPP_RELEASE_STORE_FILE }}
          MYAPP_RELEASE_STORE_PASSWORD: ${{ secrets.MYAPP_RELEASE_STORE_PASSWORD }}
          MYAPP_RELEASE_KEY_ALIAS: ${{ secrets.MYAPP_RELEASE_KEY_ALIAS }}
          MYAPP_RELEASE_KEY_PASSWORD: ${{ secrets.MYAPP_RELEASE_KEY_PASSWORD }}

          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SEND_ID: ${{ secrets.FIREBASE_MESSAGING_SEND_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          file_name: '.env.test'
          directory: '.'

      - name: Signing and Building the APP
        uses: actions/setup-java@v1
        with:
          java-version: '11.0.10'
      - run: keytool -genkey -v -dname "cn=OlaMundoWeb, ou=OMW, o=none, l=none, st=Rio Grande do Norte, c=RN" -keystore "./android/app/${{ secrets.MYAPP_RELEASE_STORE_FILE }}" -storepass "${{ secrets.MYAPP_RELEASE_STORE_PASSWORD }}" -alias "${{ secrets.MYAPP_RELEASE_KEY_ALIAS }}" -keyalg RSA -keysize 2048 -validity 10000

      - name: Set up node v14
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies and build APP if cache not hit
        if: steps.cacheApp.outputs.cache-hit != 'true'
        run: yarn install --production && yarn android:build:test

  ReleaseApp:
    needs: BuildApp
    if: needs.BuildApp.outputs.shouldCreateRelease == 'true'

    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: cacheApp
        with:
          path: |
            node_modules
            android/app/build/outputs/apk/release
          key: ${{ needs.BuildApp.outputs.version }}-${{ hashFiles('yarn.lock') }}

      - name: Create a release only if cache exists
        if: steps.cacheApp.outputs.cache-hit != 'true'
        run: exit 1

      - name: Create Release
        id: createRelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.BuildApp.outputs.version }}
          release_name: ${{ needs.BuildApp.outputs.release }}
          body: ${{ needs.BuildApp.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createRelease.outputs.upload_url }}
          asset_path: android/app/build/outputs/apk/release/app-release.apk
          asset_name: Musicando.apk
          asset_content_type: application/vnd.android.package-archive
